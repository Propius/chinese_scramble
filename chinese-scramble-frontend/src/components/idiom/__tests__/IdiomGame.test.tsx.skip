import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import IdiomGame from '../IdiomGame';

const mockOnSubmit = jest.fn();
const mockOnTimeout = jest.fn();
const mockOnHintRequest = jest.fn();

const defaultProps = {
  scrambledCharacters: ['龙', '点', '画', '睛'],
  correctAnswer: '画龙点睛',
  timeLimit: 120,
  onSubmit: mockOnSubmit,
  onTimeout: mockOnTimeout,
  onHintRequest: mockOnHintRequest,
  difficulty: '简单',
};

const renderWithDnD = (ui: React.ReactElement) => {
  return render(
    <DndProvider backend={HTML5Backend}>
      {ui}
    </DndProvider>
  );
};

describe('IdiomGame Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  describe('Rendering', () => {
    it('should render game header with correct difficulty', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/难度:/)).toBeInTheDocument();
      expect(screen.getByText(/简单/)).toBeInTheDocument();
    });

    it('should render timer with correct initial time', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/⏱️ 2:00/)).toBeInTheDocument();
    });

    it('should render hint counter as 0/3', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/💡 提示: 0\/3/)).toBeInTheDocument();
    });

    it('should render all scrambled characters', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      defaultProps.scrambledCharacters.forEach(char => {
        expect(screen.getByText(char)).toBeInTheDocument();
      });
    });

    it('should render answer area with empty drop zones', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText('📝')).toBeInTheDocument();
      expect(screen.getByText(/答案区域/)).toBeInTheDocument();
    });

    it('should render three hint buttons', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/提示1: 成语含义/)).toBeInTheDocument();
      expect(screen.getByText(/提示2: 第一个字/)).toBeInTheDocument();
      expect(screen.getByText(/提示3: 用法示例/)).toBeInTheDocument();
    });

    it('should render reset and submit buttons', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/🔄 重置/)).toBeInTheDocument();
      expect(screen.getByText(/✓ 提交答案/)).toBeInTheDocument();
    });
  });

  describe('Timer Functionality', () => {
    it('should countdown timer every second', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/⏱️ 2:00/)).toBeInTheDocument();

      jest.advanceTimersByTime(1000);
      expect(screen.getByText(/⏱️ 1:59/)).toBeInTheDocument();

      jest.advanceTimersByTime(10000);
      expect(screen.getByText(/⏱️ 1:49/)).toBeInTheDocument();
    });

    it('should call onTimeout when timer reaches zero', () => {
      renderWithDnD(<IdiomGame {...defaultProps} timeLimit={3} />);

      jest.advanceTimersByTime(4000);

      expect(mockOnTimeout).toHaveBeenCalledTimes(1);
    });

    it('should format timer correctly for single digit seconds', () => {
      renderWithDnD(<IdiomGame {...defaultProps} timeLimit={65} />);

      expect(screen.getByText(/⏱️ 1:05/)).toBeInTheDocument();
    });
  });

  describe('Hint System', () => {
    it('should request hint level 1 when clicking hint 1 button', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const hint1Button = screen.getByText(/提示1: 成语含义/);
      fireEvent.click(hint1Button);

      expect(mockOnHintRequest).toHaveBeenCalledWith(1);
    });

    it('should request hint level 2 when clicking hint 2 button', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const hint2Button = screen.getByText(/提示2: 第一个字/);
      fireEvent.click(hint2Button);

      expect(mockOnHintRequest).toHaveBeenCalledWith(2);
    });

    it('should request hint level 3 when clicking hint 3 button', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const hint3Button = screen.getByText(/提示3: 用法示例/);
      fireEvent.click(hint3Button);

      expect(mockOnHintRequest).toHaveBeenCalledWith(3);
    });

    it('should increment hints used counter when hint is requested', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/💡 提示: 0\/3/)).toBeInTheDocument();

      const hint1Button = screen.getByText(/提示1: 成语含义/);
      fireEvent.click(hint1Button);

      expect(screen.getByText(/💡 提示: 1\/3/)).toBeInTheDocument();
    });

    it('should disable hint buttons after 3 hints used', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const hint1Button = screen.getByText(/提示1: 成语含义/);

      fireEvent.click(hint1Button);
      fireEvent.click(hint1Button);
      fireEvent.click(hint1Button);

      expect(screen.getByText(/💡 提示: 3\/3/)).toBeInTheDocument();
      expect(hint1Button).toBeDisabled();
    });

    it('should display hint text when hint prop is provided', () => {
      const hintText = '这个成语的意思是比喻在关键地方加上一笔';
      renderWithDnD(<IdiomGame {...defaultProps} hint={hintText} />);

      expect(screen.getByText(/💡 提示/)).toBeInTheDocument();
      expect(screen.getByText(hintText)).toBeInTheDocument();
    });

    it('should show remaining hints count', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/(3 次可用)/)).toBeInTheDocument();

      const hint1Button = screen.getByText(/提示1: 成语含义/);
      fireEvent.click(hint1Button);

      expect(screen.getByText(/(2 次可用)/)).toBeInTheDocument();
    });
  });

  describe('Submit Functionality', () => {
    it('should disable submit button when not all characters placed', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const submitButton = screen.getByText(/✓ 提交答案/);
      expect(submitButton).toBeDisabled();
    });

    it('should show alert when submitting incomplete answer', () => {
      window.alert = jest.fn();
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const submitButton = screen.getByText(/✓ 提交答案/);
      fireEvent.click(submitButton);

      expect(window.alert).toHaveBeenCalledWith('请完成所有字符的排列！(Please place all characters!)');
    });

    it('should change button text to "提交中..." when submitting', async () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      // Simulate all characters placed (this would require drag-and-drop simulation)
      // For now, we test the disabled state
      const submitButton = screen.getByText(/✓ 提交答案/);
      expect(submitButton).toBeInTheDocument();
    });

    it('should calculate time taken correctly on submit', () => {
      jest.useRealTimers();
      const startTime = Date.now();
      jest.useFakeTimers().setSystemTime(startTime);

      renderWithDnD(<IdiomGame {...defaultProps} />);

      // Advance time by 5 seconds
      jest.advanceTimersByTime(5000);

      // Note: Full submit test would require drag-and-drop simulation
      // which is complex with react-dnd and HTML5Backend
    });
  });

  describe('Reset Functionality', () => {
    it('should have reset button enabled', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const resetButton = screen.getByText(/🔄 重置/);
      expect(resetButton).not.toBeDisabled();
    });

    it('should disable reset button when submitting', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      // Set isSubmitting state would require interaction
      // Testing button exists and has proper class
      const resetButton = screen.getByText(/🔄 重置/);
      expect(resetButton).toHaveClass('bg-gray-500');
    });
  });

  describe('Progress Indicator', () => {
    it('should render progress indicator', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/已完成: 0 \/ 4/)).toBeInTheDocument();
    });

    it('should show progress bar with 0% initially', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      const progressBar = screen.getByText(/已完成:/).parentElement?.querySelector('.bg-gradient-to-r');
      expect(progressBar).toHaveStyle({ width: '0%' });
    });
  });

  describe('Difficulty Display', () => {
    it('should display EASY difficulty correctly', () => {
      renderWithDnD(<IdiomGame {...defaultProps} difficulty="简单" />);
      expect(screen.getByText(/难度: 简单/)).toBeInTheDocument();
    });

    it('should display MEDIUM difficulty correctly', () => {
      renderWithDnD(<IdiomGame {...defaultProps} difficulty="中等" />);
      expect(screen.getByText(/难度: 中等/)).toBeInTheDocument();
    });

    it('should display HARD difficulty correctly', () => {
      renderWithDnD(<IdiomGame {...defaultProps} difficulty="困难" />);
      expect(screen.getByText(/难度: 困难/)).toBeInTheDocument();
    });

    it('should display EXPERT difficulty correctly', () => {
      renderWithDnD(<IdiomGame {...defaultProps} difficulty="专家" />);
      expect(screen.getByText(/难度: 专家/)).toBeInTheDocument();
    });
  });

  describe('UI Instructions', () => {
    it('should display game instructions', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/📝 游戏说明/)).toBeInTheDocument();
      expect(screen.getByText(/拖动下方的字符到答案区域，按正确顺序排列成语。点击已放置的字符可以移除。/)).toBeInTheDocument();
    });

    it('should display hint for answer area', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/💡 提示: 拖动下方字符到答案区，或点击已放置的字符移除/)).toBeInTheDocument();
    });

    it('should display hint for available characters', () => {
      renderWithDnD(<IdiomGame {...defaultProps} />);

      expect(screen.getByText(/👆 拖动字符到上方答案区域/)).toBeInTheDocument();
    });
  });

  describe('Edge Cases', () => {
    it('should handle empty scrambled characters', () => {
      renderWithDnD(<IdiomGame {...defaultProps} scrambledCharacters={[]} />);

      expect(screen.getByText(/答案区域/)).toBeInTheDocument();
    });

    it('should handle very short time limit', () => {
      renderWithDnD(<IdiomGame {...defaultProps} timeLimit={1} />);

      expect(screen.getByText(/⏱️ 0:01/)).toBeInTheDocument();

      jest.advanceTimersByTime(2000);
      expect(mockOnTimeout).toHaveBeenCalled();
    });

    it('should handle very long time limit', () => {
      renderWithDnD(<IdiomGame {...defaultProps} timeLimit={3600} />);

      expect(screen.getByText(/⏱️ 60:00/)).toBeInTheDocument();
    });
  });
});
